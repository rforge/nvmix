### For next release ###########################################################

- Write vignette nvmix_functionality.Rmd
- need rmultinorm
- names: *multinorm long, also we don't mention 'multivariate' for the other
  distributions either, '*mv*' already done by mvtnorm pkg.
  => dNorm, pNorm, rNorm, fitNorm
     [could go with dGauss, pGauss, rGauss?]
     [or dNorm, pNorm, rNorm, fitNorm]
     [((and?) dT, pT, rT, fitT)]
- MH: check ./R
- MH: check ./man


### TODO #######################################################################

- TODO in rnvmix(), maybe it would be nice if user could specify if random
       or quasi-random samples should be produced
- TODO Need fitnvmix(): check what other packages do
- DONE implement dnvmix() as well as wrappers for normal/t case.
- DONE (d=1): pnvmix() should work with d = 1 and with missing data
  TODO what to do with missing data? error?
- TODO Do we want a function that has multiple lower and upper as input?
- DONE pStudent should work with df = Inf
- DONE implement multivariate normal distribution
- DONE rename 'a' and 'b' to 'lower' and 'upper'; 'nu' to 'df'
       (first arg should be 'upper' with default lower being '-Inf,...')
- DONE 'R' should be 'scale' and we need a 'standardized = FALSE' argument;
       if standardized = TRUE, loc = 0 and sigma = correlation matrix is assumed
       ... or so)
- TODO 'swap' needs to be improved
- DONE 'func' not needed if 'base case' in pnvmix() is part of the loop
       (only one call necessary then, so can be omitted)
- DONE more intuitive names for arguments concerning tolerance(s)
- TODO incorporate the case of a singular scale matrix
- TODO look into quantile functions of univariate (marginal) normal variance mixtures.
       If we have a function, say, qnvmix1 (for 1 dimensional normal variance mixtures),
       we have a way to sample from univariate normal variance mixtures using inversion,
       which can then be used for quasi-Monte Carlo sampling
- DONE polish ./src


### More thoughts ##############################################################

pnvmix() does not work for multiple upper/lower input vectors, since the
preconditioning heavily depends on the input parameters. However, in d = 1,
since we have the function pnorm(), the integration problem is actually
one-dimensional. In this case, no reordering needs to be done and we can implement
a "vectorized" pnvmix1() (I use 1 to highlight that it works only for d = 1).
Indeed, we only need to sample from the mixture distribution and then evaluate
pnorm() with different upper/lower bounds. We can use common random numbers
(i.e. simulate from R, use these simulations for all upper/lower) and evaluate
the df efficiently at many points. This is particularly useful for
implementing qnvmix1(), since pnvmix1() can evaluate at multiple "upper" at once.
Still, pnvmix1() will only approximate the true df, numerically inverting that
approximated df will inevitably lead to numerical inaccuracies.


### Packages dealing with multivariate Student's t distribution ################

2018-06-21:
- monomvn (estimation under monotone pattern missing data; MLE & Bayesian)
- mvnfast (no pnvmix(), simulation, density, Mahalanobis distances)
- tmvtnorm (has ptmvt(), based on Gibbs sampler; see http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.6892)
- MVT (studentFit(); for fixed nu (= eta here), estimates location and scale; paper mentions EM Algorithm)
- mvtnorm (clear; no fitting, no non-integer dof, qmvt() [equicoordinate quantile function])
- QRM (fit.mst())
