### For next release ###########################################################

1) MH: check ./R/dnvmix.R + FIX!!!
2) MH: check ./man/*.Rd

## Important
- MH: return value of pnvmix() has to be renamed (not informative); adapt also
      documentation before function head and the return() calls inside pnvmix()
  + passing information as list() attribute? as mvtnorm?
  + important are ('value', (error, numiter)); check mvtnorm
  => same for dnvmix()
- MH: Would possibly be useful to have a 'matricized' version of pnvmix() (we do the
  looping); d/(r)nvmix are 'matricized'
- MH: also deal with missing data => propagate NA
- MH: incorporate the case of a singular scale matrix
      (or at least give better error message)
- MH: do most of the beginning of pnvmix() in the wrapper function

- EH/MH: 'rnvmix()' needs a 'method' argument (see 'pnvmix') + new argument 'mix' ('rmix'?)
         for passing a RNG
         => call other arguments 'mix' 'qmix' instead (check carefully)
- EH: Give variables internally in pnvmix() better names (than 'N.', 'i.', 'T.', n.', for example)
- EH: C code: use 'd' instead of 'q' (caution: 'd' is already a variable in the C code...)
      maybe yorg/y_org and yant/y_ant
- EH: why does 'q' need to be passed to precond()? simply determine it from 'scale'?
- EH: TODOs inside pnvmix()
- EH: can't precond() start the for-loop from case j = 1?
- Write vignette nvmix_functionality.Rmd


### TODO #######################################################################

- TODO Need fitnvmix(): check what other packages do
- TODO look into quantile functions of univariate (marginal) normal variance mixtures.
       If we have a function, say, qnvmix1 (for 1 dimensional normal variance mixtures),
       we have a way to sample from univariate normal variance mixtures using inversion,
       which can then be used for quasi-Monte Carlo sampling
- DONE implement dnvmix() as well as wrappers for normal/t case.
- DONE (d=1): pnvmix() should work with d = 1 and with missing data
- DONE pStudent should work with df = Inf
- DONE implement multivariate normal distribution
- DONE rename 'a' and 'b' to 'lower' and 'upper'; 'nu' to 'df'
       (first arg should be 'upper' with default lower being '-Inf,...')
- DONE 'R' should be 'scale' and we need a 'standardized = FALSE' argument;
       if standardized = TRUE, loc = 0 and sigma = correlation matrix is assumed
       ... or so)
- DONE 'swap' needs to be improved
- DONE 'func' not needed if 'base case' in pnvmix() is part of the loop
       (only one call necessary then, so can be omitted)
- DONE more intuitive names for arguments concerning tolerance(s)
- DONE polish ./src


### More thoughts ##############################################################

pnvmix() does not work for multiple upper/lower input vectors, since the
preconditioning heavily depends on the input parameters. However, in d = 1,
since we have the function pnorm(), the integration problem is actually
one-dimensional. In this case, no reordering needs to be done and we can implement
a "vectorized" pnvmix1() (I use 1 to highlight that it works only for d = 1).
Indeed, we only need to sample from the mixture distribution and then evaluate
pnorm() with different upper/lower bounds. We can use common random numbers
(i.e. simulate from R, use these simulations for all upper/lower) and evaluate
the df efficiently at many points. This is particularly useful for
implementing qnvmix1(), since pnvmix1() can evaluate at multiple "upper" at once.
Still, pnvmix1() will only approximate the true df, numerically inverting that
approximated df will inevitably lead to numerical inaccuracies.


### Packages dealing with multivariate Student's t distribution ################

2018-06-21:
- monomvn (estimation under monotone pattern missing data; MLE & Bayesian)
- mvnfast (no pnvmix(), simulation, density, Mahalanobis distances)
- tmvtnorm (has ptmvt(), based on Gibbs sampler; see http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.6892)
- MVT (studentFit(); for fixed nu (= eta here), estimates location and scale; paper mentions EM Algorithm)
- mvtnorm (clear; no fitting, no non-integer dof, qmvt() [equicoordinate quantile function])
- QRM (fit.mst())
